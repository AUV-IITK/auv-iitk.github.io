{
    "blogsData": [
        {
            "heading": "Story of Hydrophones",
            "author": "Inshu Namdev",
            "date": "12 December, 2020",
            "abstract": "Underwater acoustic localization refers to the task of locating the position of the pinger. The main idea involved in solving this task is that the analog signal received is first amplified and then passed through an analog filter. Next, the filtered signal is again amplified and then converted into digital signals. Hereafter these digital signals are sent to the onboard computer for further processing.",
            "bannerImage": "hydrophone.jpeg",
            "blogId": "story_of_hydrophones",
            "body": [
                {
                    "type":"h2",
                    "content": "Introduction" 
                },
                {
                    "type": "para",
                    "content":"Underwater acoustic localization refers to the task of locating the position of the pinger. The main idea involved in solving this task is that the analog signal received is first amplified and then passed through an analog filter. Next, the filtered signal is again amplified and then converted into digital signals. Hereafter these digital signals are sent to the onboard computer for further processing. "
                },
                {
                    "type":"h2",
                    "content": "Proposed Solution" 
                },
                {
                    "type":"image",
                    "src":"hydrophones_workflow.png"
                },
                {
                    "type":"h2",
                    "content": "Setup" 
                },
                {
                    "type":"list-block",
                    "listHeading":"Instruments to be used",
                    "listItems": [
                        "Hydrophones - AS-1 from Aquarian Audio",
                        "Pinger - In SAUVC, RJ International Pinger model no.ULB-362B/45 RJ International Pinger model no.ULB-362PL/B37 are used as pingers. In Robosub AUVSI, the pinger used is FLEXI-pinger ALP-365/EL/SW 4 which is functional at a frequency in the range of 20-30 kHz.",
                        "ADC-LTC2383",
                        "The PCB for the analog part",
                        "Arduino Mega 2560",
                        "The NUC"
                    ]
                },
                {
                    "type": "para",
                    "content":"The magnitude of the Signal received by the hydrophone was small, and hence there was a need for an amplifier to increase the signal’s amplitude before passing it into the filter. Initially, the gain was set to 25 times and then to 50. The filter used was a low-pass filter with a cutoff frequency of 37.5 kHz. After amplification, this signal is passed through an ADC (ADCS7476 in our case), converting it into a digital signal. Finally, this digital signal was passed on to the NUC"
                },
                {
                    "type": "para",
                    "content":"After simulating the above circuit on LTSpice, its PCB was designed. The PCB had four inputs for the signals received by the hydrophones. Each signal received by the hydrophones is initially put through an amplifier and analog filtering. The amplifier adds a gain of fifty and sends it to the analog filter, which is a 6th order low-pass filter with a cutoff frequency of 37.5 kHz. The low-pass filter output is re-amplified to map the output of the filter into the input range of ADC for maximum efficiency. Now the signal is converted into the differential form to send it to the ADC (ADCS7476). The Arduino Mega takes signals sent from the ADC and transfers them into the processor's memory. At this point, the data has been successfully transferred into the NUC. The processed information is used to find coordinates using the algorithm given below:"    
                },
                {
                    "type":"image",
                    "src":"hydrophones_page_1.jpeg"    
                },
                {
                    "type":"image",
                    "src":"hydrophones_page_2.jpeg"    
                },
                {
                    "type":"image",
                    "src":"hydrophones_page_3.jpeg"    
                }
            ]
        },
        {
            "heading": "Designing Anahita",
            "author": "Priank Prasad",
            "date": "8 October, 2020",
            "abstract": "Developing an underwater vehicle can be a very long and tedious task. All processes involved should be done perfectly, as a minor error could result in unexpected water leakage. A highly efficient plan of action is needed- which can take care of all the possible minor errors. The planning should not be limited to inputs from the mechanical subsystem; the electrical wiring and sensor placement should be thought of properly. This article will be focusing on the design aspects of the Anahita, assuming essential planning has already been devised.",
            "bannerImage": "bot_orientation.jpg",
            "blogId": "designing_anahita",            
            "body": [
                {
                    "type":"para",
                    "content": "Developing an underwater vehicle can be a very long and tedious task. All processes involved should be done perfectly, as a minor error could result in unexpected water leakage. A highly efficient plan of action is needed- which can take care of all the possible minor errors. The planning should not be limited to inputs from the mechanical subsystem; the electrical wiring and sensor placement should be thought of properly. This article will be focusing on the design aspects of the Anahita, assuming essential planning has already been devised." 
                },
                {
                    "type": "para",
                    "content":"Designing can be broken down into two substeps - part designing and vehicle positional orientation. After our first AUV Varun, we wanted to make our AUV modular for easier debugging purposes. For Anahita, we decided to have seven separate watertight casings- Main hull, solenoid hull, imu casing, two battery pods, two camera casing. All the parts were designed while keeping track of the buoyancy. The total buoyancy of the vehicle should be about 1-2% more than the total weight of the vehicle. In case of an unexpected power shutdown, the vehicle should be capable of surfacing."
                },
                {
                    "type": "para",
                    "content":"After designing the parts, we move to determine the orientation of the vehicle. It is the most critical step as it gives an idea of the total drag faced by the AUV. Think of all possible positional orientations containing all the parts and make a solid model. Shortlist the designs keeping in mind the required degree of freedom, size restriction (according to problem statement), accessibility of each part, sensor placement, and thruster positioning. Now, run all the shortlisted designs for drag analysis through Ansys fluent. Select the design with minimum drag, has adequate accessibility for each part, and has correct sensors’ placement. For Anahita, about 30 designs were suggested. And around ten designs were simulated in Ansys Fluent. We selected the following design with a drag of 10N for 0.6 m/s speed of the vehicle:"    
                },
                {
                    "type":"image",
                    "src":"bot_orientation.jpg"
                },
                {
                    "type":"para",
                    "content":"The final step in vehicle design is designing the frame. Choose a rectangular sheet of metal and mound all parts to it. Now, calculate the stresses for each metal individually. This is done by using Ansys Structural and Ansys Topology Optimization. Ansys Structural is used to find stresses across a metal plate. In contrast, Ansys Topology Optimization is used to optimize the metal weight- it removes non-essential weight (areas corresponding to lower stress). A total of about 90% metal mass was removed. The output of topology optimization has rough surfaces. In the remaining 10% area, truss-like structures were extruded to give additional structural strength to the frame part. While forming trusses, it should be noted that no trusses should have pointed sides- i.e., all sides should have fillet- otherwise, they may form Stress Concentration. This procedure was performed for all the frame components. For Anahita, we had a total of seven major metal sheets- four sides, two middle, one bottom- and individual analysis was carried out. The final design of Anahita is as follows:"
                },
                {
                    "type":"image",
                    "src":"final_orientation.jpg"
                }
            ]
        },
        {
            "heading": "ANSYS helps AUV-IITK design its latest vehicle Anahita",
            "author": "Naveen Chandra",
            "date": "6 May, 2019",
            "abstract": "AUV-IITK is a multidisciplinary team of IITK students involved in designing, manufacturing, and testing of a series of Autonomous Underwater Vehicles (AUVs), working towards providing a research platform for geoscientific research while preparing to compete in prestigious competitions such as NIOT, SAUVC, and RoboSub. Using ANSYS, we can produce 3D flow visualization. Using which we can identify vortex location, find streamlines of velocity across 3D and 2D profiles of the vehicle and find the total drag force on the robot.",
            "bannerImage": "Anahita.jpg",
            "blogId": "ansys_anahita",            
            "body": [
                {
                    "type":"para",
                    "content": "AUV-IITK is a multidisciplinary team of IITK students involved in designing, manufacturing, and testing of a series of Autonomous Underwater Vehicles (AUVs), working towards providing a research platform for geoscientific research while preparing to compete in prestigious competitions such as NIOT, SAUVC, and RoboSub." 
                },
                {
                    "type": "para",
                    "content": "After two successful prototypes, we have developed two AUVs, namely Varun and Anahita, and both of them have obtained the 1st Runners Up position in NIOT-SAVe 2017 and 2019 respectively. The goal of these competitions is to promote autonomy in underwater vehicles, which is considerably difficult."
                },
                {
                    "type":"image",
                    "src":"Anahita.jpg"
                },
                {
                    "type":"h2",
                    "content": "Flow Analysis using ANSYS" 
                },
                {
                    "type": "para",
                    "content": "One of the primary stages in designing and modeling of an AUV is the study of the motion of the vehicle and the subsequent visualization of fluid flow across the body of the bot. Using ANSYS, we can produce 3D flow visualization. Using which we can identify vortex location, find streamlines of velocity across 3D and 2D profiles of the vehicle and find the total drag force on the robot."    
                },
                {
                    "type":"image",
                    "src":"VelocityStreamlines.jpg"
                },
                {
                    "type":"para",
                    "content":"For selecting the present design of the vehicle, we listed all the possible orientations (we thought of seven designs by hand) and then calculated the drag for all the designs and selected the one with the least drag. Accordingly, we simulated our vehicle in ANSYS Fluent and obtained a drag versus speed graph for our system. The present vehicle has a drag of 10N about at 0.6m/s speed of the vehicle."
                },
                {
                    "type":"image",
                    "src":"DragVsVelocity.png"
                },
                {
                    "type":"h2",
                    "content": "Optimisation of Open Frame" 
                },
                {
                    "type": "para",
                    "content":"The frame or the outer structure is one of the most critical parts of a vehicle; it holds all the components together and provides structural strength to the AUV. This year, in Anahita, we have implemented an open frame design. To make the best-optimized frame, we used the Static Structural analysis of ANSYS Mechanical. Using this we compute the stresses acting on the plate at each point, by feeding in the forces that to be applied at the different faces. Using the knowledge of the different stresses, we perform topology optimization on the plate and using it, reduce the mass of the frame without compromising on the strength and robustness it offers."    
                },
                {
                    "type":"image",
                    "src":"SidePlateTopologyOptimization.jpg"
                },
                {
                    "type": "para",
                    "content": "Using the diversity offered by the ANSYS workbench, we could finalize the final design of the frame, and international experts have appreciated this design work. Our team presented the research paper, 'Design and Development of an Open Frame AUV: ANAHITA' at the IEEE OES Symposium held at the University of Porto in November 2018."    
                },
                {
                    "type":"image",
                    "src":"FinalFrame.png"
                },
                {
                    "type": "para",
                    "content": "Apart from this, we have performed structural analysis for most of the components in our AUV, taking into account the applied forces, their rigidity, and the material to be used for manufacturing. Our team aims to develop a new vehicle for the next year of competitions, and we will be designing an entirely new structure for our bot. We will be using ANSYS to help make design choices, notably determining the hydrodynamic characteristics and analyzing structural loading of the frame, before committing to a design and beginning the manufacturing process."    
                },
                {
                    "type":"image",
                    "src":"AfterStructuralAnalysis.jpg"
                }
            ]
        },
        {
            "heading": "Useful Tips for ROS Users",
            "author": "Mayank Mittal",
            "date": "11 July, 2017",
            "abstract": "Earlier people had to write a large amount of code ranging from low-level driver functions to high-level control algorithms for their robots. I too experienced this pain when I started working on the underwater vehicle project in my undergraduate university. This approach sometimes made changing even one sensor on our system a daunting task. However, things changed when we started using Robot Operating System (ROS) as the framework for our robot's software stack. The large open sourced community for ROS has made it possible to implement novel algorithms on the robot without worrying too much about the hardware-software integration.",
            "bannerImage": "ROS.jpg",
            "blogId": "ros_tips",
            "body": [
                {
                    "type":"h2",
                    "content": "Introduction" 
                },
                {
                    "type": "para",
                    "content":"Earlier people had to write a large amount of code ranging from low-level driver functions to high-level control algorithms for their robots. I too experienced this pain when I started working on the underwater vehicle project in my undergraduate university. This approach sometimes made changing even one sensor on our system a daunting task. However, things changed when we started using Robot Operating System (ROS) as the framework for our robot's software stack. The large open sourced community for ROS has made it possible to implement novel algorithms on the robot without worrying too much about the hardware-software integration."
                },
                {
                    "type": "para",
                    "content":"Although the ROS tutorials introduces various core concepts of ROS, it takes a bit of hard work to develop a better comprehension of the entire robot software architecture. Even after going through tutorials, I struggled to write my first ROS node. (Could be I am a slow learner? :P ) Having said that, the post highlights a few interesting ROS concepts and packages that a beginner might find useful in his journey as a robotics developer."
                },
                {
                    "type":"h2",
                    "content": "Different Naming Styles" 
                },
                {
                    "type": "para",
                    "content":"Nodes, topics, services, and parameters are referred to as graph resources in ROS. Each of these is identified with a unique graph resource name within the ROS computation graph. The naming scheme is hierarchical in nature. In general, there are three different naming systems followed:"
                },
                {
                    "type":"list-block",
                    "listHeading":"Global Name",
                    "listItems": [
                        "Begins with leading slash (/)",
                        "Requires no additional resolving to decide the resource being referred to",
                        "Comprises of a sequence of zero or more namespaces and a base name. The namespace helps in grouping related graph resources together while the base name describes the resource itself"
                    ]
                },
                {
                    "type": "para",
                    "content":"Examples: /turtle1/cmd_vel, /turtle1/pose belong to the namespace turtle1 with the base names cmd_vel and pose respectively"
                },
                {
                    "type":"list-block",
                    "listHeading":"Relative Name",
                    "listItems": [
                        "Does not have any special character at the start",
                        "Relies on ROS client library to resolve the name into a global name",
                        "Resolving done by attaching the name of default namespace to the front of relative name",
                        "Provides flexibility over organization of system and helps in avoiding name clashes when groups of same nodes are to be launched"
                    ]
                },
                {
                    "type": "para",
                    "content":"Examples: cmd_vel, camera/rgb/img_raw are relative names. To map to the global name, suppose name of default namespace is /alpha. Conseqently the global names would /alpha/cmd_vel and /alpha/camera/rgb/img_raw respectively."
                },
                {
                    "type":"list-block",
                    "listHeading":"Private Name",
                    "listItems": [
                        "Begins with tilde (~) character",
                        "Relies on ROS client library to resolve the name into a global name",
                        "Resolving is done similar to that for relative name, however, the name of the node is used as namespace instead of default namespace",
                        "Often used for setting parameters to a node since a node's namespace is not required to be shared"
                    ]
                },
                {
                    "type": "para",
                    "content":"Example: For a node with global name /zonePublisher, if it has a private parameter ~land_site then its global name would become /zonePublisher/land_site"
                },
                {
                    "type": "h2",
                    "content": "Nodes vs. Nodelets"
                },
                {
                    "type": "para",
                    "content":"In ROS each node runs as a single process. The nodes communicate with each other using the TCPROS protocol (which uses the standard TCP/IP Sockets). This usually suffices for most of the data transfer that needs to be done between nodes. However, when data is large (such as laser scans or point clouds), it is faster to send a pointer to the data location instead of sending the entire data in form of packets through the TCP protocol. In cases like these, nodelets prove to be useful."
                },
                {
                    "type": "para",
                    "content":"Nodelets allow running multiple algorithms in a thread, with each algorithm running as a thread in the process. roscpp provides optimizations that allow pointers to be passed between publisher and subscriber calls within a node without the need of copying data from one memory location to another (also called zero copying). The ROS documentation here provides a nice overview on how to write nodelets."
                },
                {
                    "type": "h2",
                    "content": "Topics vs. Services vs. Actionlib"
                },
                {
                    "type":"list-block",
                    "listHeading":"Topics",
                    "listItems": [
                        "Used for continuous data streams (like sensor data, robot state)",
                        "Continuous data flow is allowed with many-to-many connections feasible"
                     ]
                },
                {
                    "type":"list-block",
                    "listHeading":"Services",
                    "listItems": [
                        "Used for any discrete behavior that moves a robot or that runs for a long time and feedback is required during execution",
                        "Simple blocking call for processing requests"
                     ]
                },
                {
                    "type":"list-block",
                    "listHeading":"Actionlib",
                    "listItems": [
                        "Used for any discrete behavior that moves a robot or that runs for a long time and feedback is required during execution",
                        "More complex non-blocking background processing for real-world actions"
                     ]
                },
                {
                    "type": "h2",
                    "content": "Running commands via a checklist"
                },
                {
                    "type": "para",
                    "content":"Yes, it is possible to do this through the screerun package in ROS. The node screenrun parse over the commands written in a YAML file and push them onto a virtual terminal as if you have typed them. However, only those commands that end with 15 (the octal literal for Enter) are executed."
                },
                {
                    "type": "para",
                    "content":"This comes in handy when you have to deal with large project repositories. Although running nodes by using launch files is common (and recommended), the screenrun package provides more flexibility over the general terminals commands that one might need to execute."
                },
                {
                    "type": "h2",
                    "content": "Miss the GUIs"
                },
                {
                    "type": "para",
                    "content":" Running ROS commands through the terminal isn't really a bad practice. However, if you are like me, then you'd prefer GUIs more any particular day. ROS actually provides its own Qt-based GUI tool called rqt. In the rqt_gui, various plugins can be imported to do a variety of things. The ones available include publishing to a topic, visualizing on rviz, robot monitor and many other given on the ROS website. In fact, if required you could design your own rqt plugin by following the tutorial on ROS website."
                },
                {
                    "type": "para",
                    "content":"Well, the one which I grew a fancy for is particularly the node_manager_fkie. The interface makes it easier to launch bodes and monitor their health and view the topics, services, and parameters being published. Thus, saving the time to write terminal commands every time."
                }
            ]
        },
        {
            "heading": "Do You Really Need An i7?",
            "author": "Shikher Verma",
            "date": "29 March, 2016",
            "abstract": "Initially Shikher thought that buying a low power armh processor was a very wise choice. Low power meant lower battery consumption so lighter batteries. Also single chip armh processors like Raspberry Pi and Odroid are way cheaper. The world was good. Until one day OpenCV came along. Initially he seemed like a nice guy. Resourceful. With his awesome HighGUI and shiny high power tools like HoughCircle, Contrast stretching he seemed like a guy Shikher could rely on. But soon Shikher became so dependant on him that he forgot the limited hardware that had to support OpenCV. The world started breaking apart.",
            "bannerImage": "i7.jpg",
            "blogId": "ProcessorRobotics",            
            "body": [
                {
                    "type":"h2",
                    "content": "When Raspberry Pi 2 and Odroid U3 fail you. What next? Back to x64." 
                },
                {
                    "type":"para",
                    "content": "Initially Shikher thought that buying a low power armh processor was a very wise choice. Low power meant lower battery consumption so lighter batteries. Also single chip armh processors like Raspberry Pi and Odroid are way cheaper. The world was good. Until one day OpenCV came along. Initially he seemed like a nice guy. Resourceful. With his awesome HighGUI and shiny high power tools like HoughCircle, Contrast stretching he seemed like a guy Shikher could rely on. But soon Shikher became so dependant on him that he forgot the limited hardware that had to support OpenCV. The world started breaking apart. Shikher was caught up between using powerful tools of OpenCV or making the resource requirements low for odroid u3 and raspberry pi 2 boards. Eventually it became clear that there was no other way, Shikher started looking for stronger boards which could meet the requirements of OpenCV. He soon came across NUC; One of the most powerful boards used in robotics projects. Although the specs were great but it came with a big setback to our budget, and using it also meant increased battery consumption. Shikher tried to weigh to pros and cons of it and presented this to my team so that they will go forward with the purchase." 
                },
                {
                    "type": "h2",
                    "content":"Weighing the pros and cons"
                },
                {
                    "type":"list-block",
                    "listHeading":"Pros",
                    "listItems": [
                        "Currently our image processing nodes take a lot of cpu usage. This is because a lot of OpenCV functions are lengthy matrix operations. One way is to reduce the frame rate so that once the last frame was processed we take the latest frame and process it; dropping all the frames in between. But this leads to very low fps and uneven rate of output. For better accuracy we need to run the image processing at the fps of camera rather than being limited by our processing speed. Other than this the filter on sensor data are also resource hungry and even though right now we don't have complicated motion control and planning but later that too will require more processing power.",
                        "Shifting to a 64 bit architecture makes software development easier because both rpi and odroid were armh architecture which had limited support in terms of precompiled binaries. We even encountered a bug which is armh specific.",
                        "We are developing this auv not just for a competition but also to serve as a platform for doing underwater robotics research. In the future when we research and test more and more sophisticated algorithms we would want the testing platform to be free of any limitations.",
                        "We are running Raspberry pi 2 (and earlier Odroid u3) in headless mode (without GUI) because we don't have enough processing power to support GUI.",
                        "With surplus resources we will have the freedom to experiment and add more features like running a webserver with the controls and output data exposed as a web page.",
                        "In addition to this we also have the roscore, motion library and sensor nodes which have significant resource requirements. We expect the current requirements to increase because we will be running multiple task handlers, increasing the complexity in motion library and adding various debug nodes like a dashboard, system diagnostics and data logger."
                    ]
                },
                {
                    "type":"list-block",
                    "listHeading":"Cons",
                    "listItems": [
                        "Shifting to a more powerful processor would increase the battery requirement.",
                        "But it can be managed by using batteries of higher capacity."
                    ]
                },
                {
                    "type":"h2",
                    "content": "Planning to use Raspberry and Odroid too."
                },
                {
                    "type":"para",
                    "content":"After all this, I also ordered a router. Now we are planning to run nuc, rpi and odroid all together so the whole ros software can be distributing across the whole linux cluster. This would also provide support for low power mode, when battery is low we can switch off nuc and use minimal control via rpi to bring auv back surface. Also fault tolerance is introduced. Even if one of the boards fail the rest can work in emergency."
                }
            ]
        }
    ]
}